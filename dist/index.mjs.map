{"version":3,"file":"index.mjs","sources":["../src/core/parse.ts","../src/middleware/index.ts","../src/core/errors.ts","../src/core/shape.ts","../src/core/filter-order.ts","../src/core/serialize.ts"],"sourcesContent":["import type { ODataQueryOptions } from \"./types\";\n\nexport function parseODataQuery(query: Record<string, string | undefined>): ODataQueryOptions {\n  const opts: ODataQueryOptions = {};\n  const sel = query[\"$select\"];\n  if (sel) opts.select = sel.split(\",\").map((s) => s.trim()).filter(Boolean);\n  const orderby = query[\"$orderby\"];\n  if (orderby) {\n    opts.orderby = orderby.split(\",\").map((term) => {\n      const [prop, dir] = term.trim().split(/\\s+/);\n      return { property: prop, direction: (dir?.toLowerCase() === \"desc\" ? \"desc\" : \"asc\") };\n    });\n  }\n  const top = query[\"$top\"];\n  if (top !== undefined) opts.top = Math.max(0, Number(top));\n  const skip = query[\"$skip\"];\n  if (skip !== undefined) opts.skip = Math.max(0, Number(skip));\n  const count = query[\"$count\"];\n  if (count !== undefined) opts.count = String(count).toLowerCase() === \"true\";\n  const filter = query[\"$filter\"];\n  if (filter) opts.filter = filter;\n  const expand = query[\"$expand\"];\n  if (expand) {\n    opts.expand = Object.fromEntries(expand.split(\",\").map((e) => [e.trim(), {}]));\n  }\n  return opts;\n}\n","import type { MiddlewareObj } from \"@middy/core\";\nimport type { ODataRequestContext, ODataQueryOptions, EdmModel } from \"../core/types\";\nimport { parseODataQuery } from \"../core/parse\";\n\nexport interface ODataMiddlewareOptions {\n  model: EdmModel;\n  serviceRoot: string | ((event: any) => string);\n  enable?: {\n    compute?: boolean;\n    apply?: boolean;\n    search?: boolean;\n  };\n  defaults?: {\n    maxTop?: number;\n    defaultTop?: number;\n  };\n}\n\nexport function odata(options: ODataMiddlewareOptions): MiddlewareObj {\n  return {\n    before: async (request: any) => {\n      const event = request.event ?? {};\n      const query: Record<string, string> = event.rawQueryString\n        ? Object.fromEntries(new URLSearchParams(event.rawQueryString))\n        : (event.queryStringParameters || {});\n      const opts: ODataQueryOptions = parseODataQuery(query);\n      const serviceRoot = typeof options.serviceRoot === \"function\" ? options.serviceRoot(event) : options.serviceRoot;\n      const ctx: ODataRequestContext = {\n        model: options.model,\n        serviceRoot,\n        entitySet: undefined,\n        options: opts,\n      };\n      request.internal = request.internal || {};\n      request.internal.odata = ctx;\n    },\n  };\n}\n","import type { ODataErrorPayload } from \"./types\";\n\nexport class ODataBadRequest extends Error {\n  statusCode = 400;\n  code = \"BadRequest\";\n}\n\nexport class ODataInternalServerError extends Error {\n  statusCode = 500;\n  code = \"InternalServerError\";\n}\n\nexport function toODataError(err: unknown, message?: string): ODataErrorPayload {\n  if (err && typeof err === \"object\" && \"statusCode\" in err && \"message\" in err) {\n    const e = err as any;\n    return { error: { code: e.code ?? String(e.statusCode), message: e.message } };\n  }\n  return { error: { code: \"InternalServerError\", message: message ?? \"An error occurred\" } };\n}\n","import type { ODataEntity, ODataQueryOptions } from \"./types\";\n\nexport function applySelect<T extends ODataEntity>(row: T, select?: string[]): Partial<T> {\n  if (!select || select.length === 0) return { ...row };\n  const out: Record<string, unknown> = {};\n  for (const p of select) if (p in row) out[p] = (row as any)[p];\n  return out as Partial<T>;\n}\n\nexport function projectArray<T extends ODataEntity>(rows: T[], options: ODataQueryOptions): Partial<T>[] {\n  return rows.map((r) => applySelect(r, options.select));\n}\n\n// TODO: Implement expand functionality\nexport function expandData<T extends Record<string, any>>(\n  data: T | T[],\n  options: ODataQueryOptions\n): T | T[] {\n  // Placeholder implementation - options will be used when expand is implemented\n  void options;\n  return data;\n}\n","import type { ODataEntity, ODataQueryOptions } from \"./types\";\n\nexport function filterArray<T extends ODataEntity>(rows: T[], options: ODataQueryOptions): T[] {\n  if (!options.filter) return rows;\n  // Placeholder: filtering to be implemented via tests.\n  return rows;\n}\n\nexport function orderArray<T extends ODataEntity>(rows: T[], options: ODataQueryOptions): T[] {\n  if (!options.orderby || options.orderby.length === 0) return rows;\n  const copy = [...rows];\n  copy.sort((a, b) => {\n    for (const term of options.orderby!) {\n      const av = (a as any)[term.property];\n      const bv = (b as any)[term.property];\n      if (av == null && bv == null) continue;\n      if (av == null) return term.direction === \"asc\" ? -1 : 1;\n      if (bv == null) return term.direction === \"asc\" ? 1 : -1;\n      if (av < bv) return term.direction === \"asc\" ? -1 : 1;\n      if (av > bv) return term.direction === \"asc\" ? 1 : -1;\n    }\n    return 0;\n  });\n  return copy;\n}\n\nexport function paginateArray<T>(rows: T[], options: ODataQueryOptions): T[] {\n  const skip = options.skip ?? 0;\n  const top = options.top ?? rows.length;\n  return rows.slice(skip, skip + top);\n}\n","import type { ODataCollectionResponse } from \"./types\";\n\nexport function serializeCollection<T>(contextUrl: string, value: T[], count?: number, nextLink?: string): ODataCollectionResponse<T> {\n  const out: ODataCollectionResponse<T> = {\n    \"@odata.context\": contextUrl,\n    value,\n  };\n  if (typeof count === \"number\") out[\"@odata.count\"] = count;\n  if (nextLink) out[\"@odata.nextLink\"] = nextLink;\n  return out;\n}\n"],"names":["parseODataQuery","query","opts","sel","orderby","term","prop","dir","top","skip","count","filter","expand","e","odata","options","request","event","serviceRoot","ctx","ODataBadRequest","__publicField","ODataInternalServerError","toODataError","err","message","applySelect","row","select","out","p","projectArray","rows","r","expandData","data","filterArray","orderArray","copy","a","b","av","bv","paginateArray","serializeCollection","contextUrl","value","nextLink"],"mappings":"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"}